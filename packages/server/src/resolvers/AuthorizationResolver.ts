
/** 
 * This file generated by Apso.
*/

import {
  Resolver,
  Query,
  Mutation,
  Arg,
  InputType,
  Field
} from "type-graphql";
import Authorization from "../entities/Authorization";
import AuthorizationRepository from "../repositories/AuthorizationRepository";

@InputType()
class CreateAuthorizationInput implements Partial<Authorization> {
  
    
  @Field()
  
  public provider!: string;
    

    
  @Field()
  public email!: string;
    

    
  @Field()
  public password!: string;
    

    
  @Field()
  public tokenVersion?: number;
    

    
  @Field()
  public active!: boolean;
    
}

@Resolver()
export default class AuthorizationResolver {
  private readonly authorizationRepo: AuthorizationRepository

  constructor(
      /** AuthorizationRepository */authorizationRepo: AuthorizationRepository,
  ) {
      this.authorizationRepo = authorizationRepo;
  }

  @Query(() => Authorization)
  getAuthorization(
    @Arg("id") id: number
  ) {
    return this.authorizationRepo.findById(id)
  }

  @Query(() => [Authorization])
  getAuthorizations() {
    return this.authorizationRepo.findAll()
  }

  @Mutation(() => Authorization)
  createAuthorization(
    @Arg("data") data: CreateAuthorizationInput
  ) {
    return this.authorizationRepo.create(data)
  }  
  
  @Mutation(() => Authorization)
  async updateAuthorization(
    @Arg("data") data: Authorization
  ) {
    if (!data.id) {
      throw new Error('missing id')
    }
    
    await this.authorizationRepo.update(data.id, data)
    
    return data
  }

  
}