
/** 
 * This file generated by Apso.
*/

import {
  Resolver,
  Query,
  Mutation,
  Arg,
  InputType,
  Field
} from "type-graphql";
import Payment from "../entities/Payment";
import PaymentRepository from "../repositories/PaymentRepository";
import GraphQLJSON from 'graphql-type-json';
import { PageSettings} from 'squeazee-types'
import PaymentService from "../services/PaymentService";


@InputType()
class CreatePaymentInput implements Partial<Payment> {

        
  @Field(type => GraphQLJSON)
  public token: PageSettings;
}

@Resolver()
export default class PaymentResolver {
  private readonly paymentRepo: PaymentRepository
  private readonly service: PaymentService

  constructor(
      /** PaymentRepository */paymentRepo: PaymentRepository,
      /** PaymentService */service: PaymentService,
  ) {
      this.paymentRepo = paymentRepo;
      this.service = service;
  }

  @Query(() => Payment)
  getPayment(
    @Arg("id") id: number
  ) {
    return this.paymentRepo.findById(id)
  }

  @Query(() => [Payment])
  getPayments() {
    return this.paymentRepo.findAll()
  }

  @Mutation(() => Payment)
  async createPayment(
    @Arg("data") data: CreatePaymentInput
  ) {
    if (!data.token) {
      throw new Error('missing one of the following: [ token]')
    }
    
    const {token} = data; 
    const payment = await this.service.createPayment(token);
    console.log("there is a payment::::::::::::::::",payment);
    return payment
  }  
  
  @Mutation(() => Payment)
  async updatePayment(
    @Arg("data") data: Payment
  ) {
    if (!data.id) {
      throw new Error('missing id')
    }
    
    await this.paymentRepo.update(data.id, data)
    
    return data
  }

  
}