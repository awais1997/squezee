
/** 
 * This file generated by Apso.
*/

import {
  Resolver,
  Query,
  Mutation,
  Arg,
  InputType,
  Field,
  Ctx,
  ObjectType
} from "type-graphql";
import Lead from "../entities/Lead";
import LeadRepository from "../repositories/LeadRepository";
import LeadService from "../services/LeadService";
import JwtTokenHelper from "../helpers/JwtTokenHelper";
import { Request } from "@apso/server/dist/http/http";

@InputType()
class CreateLeadInput implements Partial<Lead> {
  @Field()
  public email!: string;

  @Field()
  public slug: string;

}
@ObjectType() 
class LeadsMetric {
  @Field()
  public landingPageId: string;

  @Field()
  public title: string;

  @Field()
  public count: number;

  @Field()
  public date?: string;

}

@Resolver()
export default class LeadResolver {
  private readonly jwtHelper: JwtTokenHelper;
  private readonly service: LeadService;

  constructor(
      /** JwtTokenHelper */jwtHelper: JwtTokenHelper,
      /** LeadService */service: LeadService
  ) {
    this.service = service;
    this.jwtHelper = jwtHelper;
  }

  @Query(() => [LeadsMetric])
  async getLeadsMetrics(@Ctx() context: { req: Request }) {
    const userId = await this.jwtHelper.verifyAndReturnUserId(context);
    const metrics = await this.service.getLeadCounts(userId);
    console.log(metrics)
  
    return metrics.map((m) => {
      const { landingPageId, title, date, count} = m;
      return {
        landingPageId,
        date,
        count,
        title
      }
    });
  }

  @Mutation(() => LeadsMetric)
  async createLead(
    @Arg("data") data: CreateLeadInput
  ) {
    const {slug} = data;
    const lead = await this.service.createLead(slug, {...data});
    console.log(lead);
    return {
      landingPageId: lead.landingPage.id,
      title: lead.landingPage.jsonBody.name,
      date: lead.createdAt,
      count: lead.landingPage.leadCount
    }
  }  
}