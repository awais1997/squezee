
/** 
 * This file generated by Apso.
*/

import LandingPageRepository from "../repositories/LandingPageRepository";
import { Config } from "../cfg";
import UserRepository from "../repositories/UserRepository";

export default class LandingPageService {
    private readonly userRepo: UserRepository;
    private readonly pageRepo: LandingPageRepository;
    private readonly config: Config;

    public constructor(
        /** LandingPageRepository */pageRepo: LandingPageRepository,
        /** UserRepository */userRepo: UserRepository,
        /** Config */config: Config
    ) {
        this.pageRepo = pageRepo;
        this.userRepo = userRepo;
        this.config = config;
    }

    async getById(userId: number, pageId: number) {
        const user = await this.userRepo.findById(
            userId, {
            relations: ['membership', 'membership.account']
        })
        return this.pageRepo.findById(pageId, {
            where: { account: user?.membership.account }
        })
    }

    getBySlug(slug: string) {
        return this.pageRepo.findBySlug(slug);
    }

    async getPages(userId: number) {
        const user = await this.userRepo.findById(
            userId, {
            relations: [
                'membership',
                'membership.account',
                'membership.account.landingPages',
                'membership.account.landingPages.leads',
            ]
        });

        return user?.membership?.account?.landingPages;
    }

    async createPage(userId: number, data) {
        const user = await this.userRepo.findById(
            userId, {
            relations: ['membership', 'membership.account']
        });

        const newLandingPage = await this.pageRepo.create(data)
        newLandingPage.account = user?.membership.account!;
        const landingPage = await this.pageRepo.save(newLandingPage)
        return landingPage
    }

    async updatePage(userId: number, data) {
        const user = await this.userRepo.findById(
            userId, {
            relations: ['membership', 'membership.account']
        });
        const pageId = data.id;
        delete data.id;

        if (!pageId) {
            throw new Error('missing id')
        }

        const dbPage = await this.pageRepo.findById(pageId, {
            where: { account: user?.membership.account }
        })

        if (!dbPage) {
            throw new Error('Page not found.')
        }

        await this.pageRepo.update(pageId, data)
        const landingPage = await this.pageRepo.findById(pageId);
        return landingPage

    }
}