
/** 
 * This file generated by Apso.
*/

import {CookieOptions} from 'express';
import { HttpServer } from '@apso/server';
import {Config} from '../cfg';
import AuthorizationService from '../services/AuthorizationService';

class AuthorizationController extends HttpServer.BaseController {
    private readonly service: AuthorizationService;
    private readonly config: Config;
    private readonly cookieConfig: CookieOptions

    public constructor(
        /** AuthorizationService */service: AuthorizationService,
        /** Config */config: Config
    ) {
        super();
        this.service = service;
        this.config = config;
        this.cookieConfig = {
          httpOnly: config.cookie.httpOnly,
          domain: config.cookie.domain,
          path: config.cookie.path,
          sameSite: config.cookie.sameSite,
          secure: config.cookie.secure
        }
    }

    public async refreshToken() {
        const token = this.req.cookies[this.config.session.key]   
        if (!token) {
          return this.sendApiSuccess({
            ok: false, accessToken: ""
          })
        }
    
        try {
          const {accessToken, refreshToken} = await this.service.setRefreshToken(token);

          this.res.cookie(
            this.config.session.key, 
            refreshToken,
            this.cookieConfig
          );
          console.log('Cookies: ', this.res.header["set-cookie"]);
          this.sendApiSuccess({ ok: true, accessToken })
        } catch(err) {
          console.log('FAILED TO REFRESH TOKEN', err)
          this.sendJson(err)
        }
    }

    public async logout() {
      this.res.clearCookie(this.config.session.key, this.cookieConfig)
      this.sendApiSuccess({});
    }

    public async login() {
      const {email, password} = this.req.body;

      try {
        const {accessToken, refreshToken, user} = await this.service.login(email, password);
        this.res.clearCookie(this.config.session.key)
        this.res.cookie(
          this.config.session.key, 
          refreshToken,
          this.cookieConfig
        );
        console.log('Cookies: ', this.res.header["set-cookie"]);
        this.sendApiSuccess({ user, accessToken })
      } catch(err) {
        this.sendJson(err)
      }
    }

    public async loginWithProvider() {
      const {provider, accessToken: token } = this.req.body;

      try {
        const {accessToken, refreshToken, user} = await this.service.loginWithProvider(provider, token);
        this.res.clearCookie(this.config.session.key)
        this.res.cookie(
          this.config.session.key, 
          refreshToken,
          this.cookieConfig
        );
        console.log('Cookies: ', this.res.header["set-cookie"]);
        this.sendApiSuccess({ user, accessToken })
      } catch(err) {
        this.sendJson(err)
      }
    }

    public async register(name: string, email: string, password: string) {
      try {
        if (!name || !email || !password) {
          throw new HttpServer.Errors.MissingParameterError('Missing either name, email or password.')
        }
        const {accessToken, refreshToken, user} = await this.service.register(name, email, password);
        this.res.cookie(
          this.config.session.key, 
          refreshToken,
          this.cookieConfig
        );
        console.log('Cookies: ', this.res.header["set-cookie"]);
        this.sendApiSuccess({ user, accessToken })
      } catch(err) {
        console.log("ERRROR", err)
        this.sendApiFailure(err)
      }
    }
}

export default AuthorizationController